@using SolarTech.Helpers;

@page "/orders/add"

@rendermode InteractiveServer

@inject SolarTech.Data.SolarTechDbContext DbContext
@inject NavigationManager NavigationManager

<h3>AddOrder</h3>

<EditForm Model="@newOrder" OnSubmit="SaveOrder">

    <div class="form-group">
        <label>Name</label>
        <InputDate class="form-control" @bind-Value="newOrder.Date" />
    </div>
    <div class="form-group">
        <label>Description</label>
        <InputText type="text" class="form-control" @bind-Value="newOrder.Description" />
    </div>
    <div class="mb-5 form-group">
        <label>NetAmount</label>
        <InputNumber class="form-control" @bind-Value="newOrder.NetAmount" />
    </div>

    <div class="mb-5 form-group">
        <label>Image</label>
        <InputFile OnChange="HandleImageUpload" class="form-control" />
    </div>

    <div class="mb-5 form-group">
        <label>Customer</label>
        <InputSelect class="form-control" @bind-Value="newOrder.CustomerId">
            @foreach (var customer in customers!)
            {
                <option value="@customer.Id">@customer.Name</option>
            }
        </InputSelect>
    </div>
    <button type="submit" class="btn me-5 btn-primary">Save</button>
    <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
</EditForm>

@code {
    private Order newOrder = new Order() { Date = DateTime.Now };
    private List<Customer>? customers;

    private IBrowserFile? selectedImage;

    protected override void OnInitialized()
    {
        customers = DbContext.Customers.ToList();
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        selectedImage = e.File;
        var buffer = new byte[selectedImage.Size];
        await selectedImage.OpenReadStream().ReadAsync(buffer);
        newOrder.ImagePath = selectedImage.Name;
    }

    private async Task SaveOrder()
    {
        if (selectedImage != null)
        {
            OrderFileUploadHelper orderFileUploadHelper = new OrderFileUploadHelper();
            var filePath = await orderFileUploadHelper.UploadOrderImage(selectedImage);
            newOrder.ImagePath = filePath;
        }

        await DbContext.Orders.AddAsync(newOrder);
        await DbContext.SaveChangesAsync();
        NavigationManager.NavigateTo("/orders");
    }

    private void Cancel() => NavigationManager.NavigateTo("/orders");
}
