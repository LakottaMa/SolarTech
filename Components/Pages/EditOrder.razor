@attribute [Authorize]

@using SolarTech.Helpers

@page "/orders/edit/{id:int}"

@rendermode InteractiveServer

@inject SolarTech.Data.SolarTechDbContext DbContext
@inject NavigationManager NavigationManager

<h3>EditOrder</h3>

<EditForm Model="@order" OnSubmit="SaveOrder">

    <div class="form-group">
        <label>Date</label>
        <InputDate class="form-control" @bind-Value="order!.Date" />
    </div>
    <div class="form-group">
        <label>Description</label>
        <InputText type="text" class="form-control" @bind-Value="order.Description" />
    </div>
    <div class="mb-5 form-group">
        <label>NetAmount</label>
        <InputNumber class="form-control" @bind-Value="order.NetAmount" />
    </div>

    <div class="mb-5 form-group">
        <label>Image</label>
        <InputFile OnChange="HandleImageUpload" class="form-control" />
    </div>

    <div class="mb-3 card-header">
        Order Nr. @order.Id - @order.Customer!.Name
        @if(!string.IsNullOrEmpty(order.ImagePath))
            {
            <div class="my-2">
                <img class="img-fluid img-thumbnail" src="@order.ImagePath" alt="Order Image" />
            </div>
            }
    </div>

    <div class="mb-5 form-group">
        <label>Customer</label>
        <InputSelect class="form-control" @bind-Value="order.CustomerId">
            @foreach(var customer in customers!)
                {
                <option value="@customer.Id">@customer.Name</option>
                }
        </InputSelect>
    </div>
    <button type="submit" class="btn me-5 btn-primary">Update</button>
    <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
</EditForm>

@code {

    [Parameter]
    public int Id { get; set; }
    private Order? order;
    private List<Customer>? customers;

    private IBrowserFile? selectedImage;

    protected override void OnInitialized()
        {
        customers = DbContext.Customers.ToList();
        order = DbContext.Orders.Find(Id);
        }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
        {
        selectedImage = e.File;
        var buffer = new byte[selectedImage.Size];
        await selectedImage.OpenReadStream().ReadAsync(buffer);
        order!.ImagePath = selectedImage.Name;
        }

    private async Task SaveOrder()
        {

        if(selectedImage != null)
            {
            OrderFileUploadHelper orderFileUploadHelper = new OrderFileUploadHelper();
            var filePath = await orderFileUploadHelper.UploadOrderImage(selectedImage);
            order!.ImagePath = filePath;
            }

        DbContext.Orders.Update(order!);
        await DbContext.SaveChangesAsync();
        NavigationManager.NavigateTo("/orders");
        }

    private void Cancel() => NavigationManager.NavigateTo("/orders");
}
